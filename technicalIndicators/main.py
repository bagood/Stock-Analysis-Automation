import logging
import pandas as pd

# --- Technical Indicator Modules ---
# Import the necessary functions from their respective modules.
# Each module is responsible for calculating a specific technical indicator.
import technicalIndicators.parabolicSar.main as sar
import technicalIndicators.aroonOscilators.main as ao
import technicalIndicators.onBalanceVolume.main as obv
import technicalIndicators.relativeStrengthIndex.main as rsi
import technicalIndicators.averageDirectionalIndex.main as adx
import technicalIndicators.accumulationDistribution.main as ad
import technicalIndicators.movingAverageConvergenceDivergence.main as macd

# --- Logging Configuration ---
# Configure the logger to display the timestamp, log level, and message.
# This helps in tracking the script's execution flow and debugging.
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

def generate_all_technical_indicators(
        data: pd.DataFrame,
        acceleration_factor: float = 0.02,
        adx_rolling_window: int = 14,
        ad_1_rolling_window: int = 5,
        ad_1_threshold: float = 0.1,
        ad_2_rolling_window: int = 10,
        ad_2_threshold: float = 0.1
    ):
    """
    Orchestrates the calculation of a suite of technical indicators.

    This function acts as a master controller, taking a DataFrame of stock data
    and applying various technical indicator calculations to it. Each indicator
    is generated by a dedicated, imported module. The function also identifies
    all the new columns (features) that were added and saves their names to a
    text file for later use in the modeling phase.

    Args:
        data (pd.DataFrame): The input DataFrame containing at least 'Open', 'High',
                             'Low', 'Close', and 'Volume' columns.
        acceleration_factor (float, optional): The acceleration factor for the
                                             Parabolic SAR calculation. Defaults to 0.02.
        adx_rolling_window (int, optional): The rolling window period for the
                                            Average Directional Index (ADX). Defaults to 14.
        ad_1_rolling_window (int, optional): The rolling window for the first
                                             Accumulation/Distribution calculation. Defaults to 5.
        ad_1_threshold (float, optional): The threshold for the first
                                          Accumulation/Distribution calculation. Defaults to 0.1.
        ad_2_rolling_window (int, optional): The rolling window for the second
                                             Accumulation/Distribution calculation. Defaults to 10.
        ad_2_threshold (float, optional): The threshold for the second
                                          Accumulation/Distribution calculation. Defaults to 0.1.

    Returns:
        pd.DataFrame: The original DataFrame augmented with new columns for each
                      calculated technical indicator.

    Side Effects:
        - Creates or overwrites a file named 'modelDevelopment/technical_indicator_features.txt'
          with the names of all generated feature columns, one per line.
    """
    logging.info("Starting the generation of all technical indicators.")

    # Store the original column names to later identify the newly added feature columns.
    original_columns = set(data.columns)

    # --- Apply Individual Technical Indicators ---
    # Each function call below takes the DataFrame, adds one or more indicator
    # columns, and returns the modified DataFrame.
    logging.info("Calculating Parabolic SAR...")
    data = sar.identify_parabolic_sar_indicators(data, acceleration_factor)

    logging.info("Calculating Aroon Oscillator...")
    data = ao.identify_ao_indicators(data)

    logging.info("Calculating On-Balance Volume (OBV)...")
    data = obv.identify_obv_indicators(data)

    logging.info("Calculating Relative Strength Index (RSI)...")
    data = rsi.identify_rsi_indicators(data)

    logging.info("Calculating Average Directional Index (ADX)...")
    data = adx.identify_adx_indicators(data, adx_rolling_window)

    logging.info("Calculating Accumulation/Distribution (AD) indicators...")
    data = ad.identify_ad_indicators(data, ad_1_rolling_window, ad_1_threshold)
    data = ad.identify_ad_indicators(data, ad_2_rolling_window, ad_2_threshold)

    logging.info("Calculating Moving Average Convergence Divergence (MACD)...")
    data = macd.identify_macd_indicators(data)

    logging.info("All technical indicators have been calculated and added to the DataFrame.")

    # --- Record Feature Columns ---
    # Identify the new columns by finding the difference between the updated
    # column set and the original one.
    updated_columns = set(data.columns)
    feature_columns = sorted(list(updated_columns - original_columns)) # Sort for consistent order
    logging.info(f"Identified {len(feature_columns)} new feature columns.")

    # Save the list of new feature names to a file. This is useful for
    # configuring the model later without having to hardcode column names.
    try:
        output_path = 'modelDevelopment/technical_indicator_features.txt'
        logging.info(f"Saving feature names to '{output_path}'...")
        with open(output_path, "w") as file:
            for fea_col in feature_columns:
                file.write(fea_col + "\n")
        logging.info("Feature names saved successfully.")
    except IOError as e:
        logging.error(f"Failed to write feature names to file: {e}")

    return data